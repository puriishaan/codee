import sys
import time
import os
from ctypes import *


serial_num = c_char_p(b"27005881")

if sys.version_info < (3, 8):
        os.chdir(r"C:\Program Files\Thorlabs\Kinesis")
    else:
        os.add_dll_directory(r"C:\Program Files\Thorlabs\Kinesis")

    lib: CDLL = cdll.LoadLibrary("Thorlabs.MotionControl.KCube.DCServo.dll")


def open(serial_num):


    # Open the device
    if lib.TLI_BuildDeviceList() == 0:
        lib.CC_Open(serial_num)
        lib.CC_StartPolling(serial_num, c_int(200))



def kdc():
    

    if sys.version_info < (3, 8):
        os.chdir(r"C:\Program Files\Thorlabs\Kinesis")
    else:
        os.add_dll_directory(r"C:\Program Files\Thorlabs\Kinesis")

    lib: CDLL = cdll.LoadLibrary("Thorlabs.MotionControl.KCube.DCServo.dll")

    STEPS_PER_REV = c_double(34555)  # for the PRM1-Z8
    gbox_ratio = c_double(1.0)  # gearbox ratio
    pitch = c_double(1.0)

        
    lib.CC_SetMotorParamsExt(serial_num, STEPS_PER_REV, gbox_ratio, pitch)


def home(serial_num):
        lib.CC_Home(serial_num)
        time.sleep(1)

def get_pos(serial_num):
        lib.CC_RequestPosition(serial_num)
        time.sleep(0.2)
        dev_pos = c_int(lib.CC_GetPosition(serial_num))

        # Convert device units to real units
        real_pos = c_double()
        lib.CC_GetRealValueFromDeviceUnit(serial_num,
                                          real_pos,
                                          byref(real_pos),
                                          0)

        return real_pos


def move(serial_num,final_dest,step_size,pause_duration):

        if b > 25:
            print("Error: 'b' should be less than or equal to 25.")
        else:
            a = 0
            while a <= final_dest:
                new_pos_real = c_double(-(a - 25.0))  
                new_pos_dev = c_int()
                lib.CC_GetDeviceUnitFromRealValue(serial_num,
                                          new_pos_real,
                                          byref(new_pos_dev),
                                          0)

                lib.CC_SetMoveAbsolutePosition(serial_num, new_pos_dev)
       	        time.sleep(0.25)
        	lib.CC_MoveAbsolute(serial_num)
                time.sleep(pause_duration)
                a += c

            


